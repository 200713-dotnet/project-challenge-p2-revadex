jobs:
  
  build_image:
    defaults:
      run:
        working-directory: Image.Service/
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: dotnet restore
      - run: dotnet build --no-restore

  build_domain:
    defaults:
      run:
        working-directory: Domain.Service/
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: dotnet restore
      - run: dotnet build --no-restore

  build_mvc:
    defaults:
      run:
        working-directory: StarDex.MVCClient/
    test:
      runs-on: ubuntu-20.04
      steps:
        - uses: actions/checkout@v2
        - run: dotnet restore
        - run: dotnet build --no-restore

  build_angular:
    defaults:
      run:
        working-directory: StarDex.AngularClient/
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: npm ci
      - run: npm run build
      - run: npm run lint

  analyze:
    needs: [build, test]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2.3.1
      - run: git fetch --unshallow
      - run: dotnet tool install --global dotnet-sonarscanner
      - run: | # multiline value with each line ending with a newline character \n
          dotnet sonarscanner begin -o:'jpchionglo' -k:'revadexdomainservice' -d:sonar.login='${{ secrets.SONARLOGINDOMAIN }}' -d:sonar.host.url='https://sonarcloud.io/'
          dotnet build Domain.Service/DomainService.sln
          dotnet test Domain.Service/DomainService.Testing/DomainService.Testing.csproj -p:CollectCoverage=true -p:CoverletOutputFormat=opencover --logger trx
          dotnet sonarscanner end -d:sonar.login='${{ secrets.SONARLOGINDOMAIN }}'
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: |
          dotnet sonarscanner begin -o:'jpchionglo' -k:'revadeximageservice' -d:sonar.login='${{ secrets.SONARLOGINIMAGE }}' -d:sonar.host.url='https://sonarcloud.io/'
          dotnet build Image.Service/ImageService.sln
          dotnet test Image.Service/Image.Testing/Image.Testing.csproj -p:CollectCoverage=true -p:CoverletOutputFormat=opencover --logger trx
          dotnet sonarscanner end -d:sonar.login='${{ secrets.SONARLOGINIMAGE }}'
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: |   
          dotnet sonarscanner begin -o:'jpchionglo' -k:'revadexstardexclient' -d:sonar.login='${{ secrets.SONARLOGINCLIENT }}' -d:sonar.host.url='https://sonarcloud.io/'
          dotnet build StarDex.MVCClient/StarDex.Client/StarDex.Client.csproj
          dotnet sonarscanner end -d:sonar.login='${{ secrets.SONARLOGINCLIENT }}'
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        


name: cibuild

on: push

